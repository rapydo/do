name: Test

on:
  push:
  # schedule:
  #   - cron: "0 1 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        test: [
            # Both Compose and Swarm
            add_upgrade,
            base,
            build_pull,
            check,
            create,
            dump,
            init,
            install,
            interfaces,
            libs,
            list,
            logs,
            password,
            restart,
            remove,
            scale,
            shell,
            start,
            status,
            update,
            volatile,

            # Swarm only
            registry,
            join,
            multi_host,

            # Compose only
            backup_restore_mariadb,
            backup_restore_neo4j,
            backup_restore_postgres,
            backup_restore_rabbit,
            backup_restore_redis,
            cronjobs,
            ssl,
            tuning,
          ]
        deploy: [compose, swarm]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --no-cache-dir --editable .[dev]
          # Needed to make git commit (used by tests) to work and prevent error: 'Author identity unknown'
          git config --global user.email "tests@rapy.do"
          git config --global user.name "RAPyDo"

          rapydo install buildx
          rapydo install compose

      - name: Run Tests
        env:
          LOGURU_LEVEL: DEBUG
          TESTING: 1
          TEST_NAME: ${{ matrix.test }}
        run: |
          # This works well for all tests... except for install... that is not covered :o
          # py.test --timeout=300 -s -x --cov-report=xml --cov=. tests/test_${{ matrix.test }}.py

          mkdir rapydo_tests
          cd rapydo_tests

          if [[ "${{ matrix.deploy }}" == "swarm" ]]; then

            # This would be only needed in production mode.
            # In dev mode the registry is bound to 127.0.0.1 that is trusted by default
            
            # IP=$(python3 -c "from controller.utilities import system; print(system.get_local_ip())")
            # sudo cat /etc/docker/daemon.json
            # sudo bash -c "echo '{\"cgroup-parent\": \"/actions_job\", \"insecure-registries\" : [\"${IP}:5000\"]}' >  /etc/docker/daemon.json"
            # sudo cat /etc/docker/daemon.json
            # sudo systemctl restart docker.service

            export SWARM_MODE="1"

            # Temporary added this to prevent fileno error when starting the registry
            # BUG probably due to compose 1.29, to be removed once migrated to compose 2
            docker pull rapydo/registry:2.1

            if [[ "${TEST_NAME}" == "multi_host" ]]; then

              base=https://github.com/docker/machine/releases/download/v0.16.0 \
                && curl --silent -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine \
                && sudo mv /tmp/docker-machine /usr/local/bin/docker-machine \
                && chmod +x /usr/local/bin/docker-machine

              docker-machine --version

              sudo apt-get update
              sudo apt-get install --yes virtualbox
              docker swarm init
              JOIN_COMMAND=$(docker swarm  join-token  worker | tail -2 | head)
              echo "Join command = ${JOIN_COMMAND}"

              # Currently not working due to lack of nested virtualization:
              # VBoxManage: error: VT-x is not available (VERR_VMX_NO_VMX)
              # docker-machine create --driver virtualbox --virtualbox-no-vtx-check --swarm test
              # docker-machine ssh test $JOIN_COMMAND
              # docker node ls

              # NFS to be added
              export NFS_HOST="127.0.0.1"
            fi

          fi

          py.test --timeout=600 --durations=5 -s -x --cov-report=xml --cov=.. ../tests/test_${TEST_NAME}.py
          cp coverage.xml ..
          cd ..

          bash <(curl -s https://codecov.io/bash)
