[project]
name = "rapydo"
version = "2.4"
description = "Manage and deploy projects based on RAPyDo framework"
requires-python = ">=3.8"
license = {file = "LICENSE"}
readme = "README.rst"
keywords = ["http", "api", "rest", "docker", "docker-compose", "docker-swarm", "rapydo"]
classifiers=[
    "Programming Language :: Python",
    "Intended Audience :: Developers",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

# dependencies = [
#     "python-on-whales==0.40.0",
#     "python-dateutil",
#     "pytz",
#     "loguru",
#     "jinja2",
#     "sultan==0.9.1",
#     "plumbum",
#     "glom",
#     "GitPython==3.1.27",
#     "PyYAML==6.0",
#     "pip>=21.3",
#     "requests>=2.6.1",
#     "typer[all]==0.4.1",
#     "click==8.1.2",
#     "zxcvbn",
#     "packaging",
# ]

# [project.optional-dependencies]
# dev = [
#     "pytest",
#     "pytest-cov",
#     "pytest-timeout",
#     "pytest-sugar",
#     "freezegun",
#     "Faker",
# ]

[project.urls]
homepage = "https://rapydo.github.io/docs"
documentation = "https://do.readthedocs.io"
repository = "https://github.com/rapydo/do"
# changelog = "https://github.com/rapydo/do"

[project.scripts]
rapydo = "controller.__main__:main"

[build-system]
requires = ["setuptools>=59.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target_version = ['py38', 'py39', 'py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
)/
'''

[tool.isort]
py_version = 38
line_length = 88
multi_line_output = 3
include_trailing_comma = true
ensure_newline_before_comments = true

[tool.mypy]

# -> Type of variable becomes "xyz" due to an unfollowed import
disallow_any_unimported = true

# This flag type checks the body of every function, regardless of whether it has type annotations.
# (By default the bodies of functions without annotations are not type checked.)
check_untyped_defs = true

warn_redundant_casts = true

warn_unused_ignores = true

warn_return_any = true

warn_unreachable = true

warn_unused_configs = true

# This flag reports an error whenever a function with type annotations
# calls a function defined without annotations
# -> Call to untyped function "xyz" in typed context
disallow_untyped_calls = true

# This flag reports an error whenever it encounters a
# function definition without type annotations.
# -> xyz Function is missing a type annotation
disallow_untyped_defs = true

# This flag reports an error whenever it encounters a
# partly annotated function definition.
disallow_incomplete_defs = true

txt_report = "."

mypy_path = "./stubs"