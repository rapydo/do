version: "3.9"

# This file may be merged with backend.yml when swarm mode will no longer be optional

services:
  backend:
    deploy:
      replicas: ${DEFAULT_SCALE_BACKEND}
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_BACKEND}"
          memory: ${ASSIGNED_MEMORY_BACKEND}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  proxy:
    deploy:
      # This prevents nginx to be behind the swarm proxy
      # Cons: nginx is no longer scalable
      # Pro: nginx is able to access the real client IP address,
      # instead of the load balancer IP
      mode: global
      # replicas: ${DEFAULT_SCALE_PROXY}
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_PROXY}"
          memory: ${ASSIGNED_MEMORY_PROXY}
      # Needed to make the proxy accessible from the hostname because it is
      # no longer behind the nginx proxy / load balancer
      placement:
        constraints:
          - "node.role==manager"
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  postgres:
    deploy:
      # is postgres supporting replicas?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_POSTGRES}"
          memory: ${ASSIGNED_MEMORY_POSTGRES}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  neo4j:
    deploy:
      # Replicas are not supported for sure
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_NEO4J}"
          memory: ${ASSIGNED_MEMORY_NEO4J}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  celery:
    deploy:
      replicas: ${DEFAULT_SCALE_CELERY}
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_CELERY}"
          memory: ${ASSIGNED_MEMORY_CELERY}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  celerybeat:
    deploy:
      replicas: ${DEFAULT_SCALE_CELERYBEAT}
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_CELERYBEAT}"
          memory: ${ASSIGNED_MEMORY_CELERYBEAT}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  rabbit:
    deploy:
      # Is rabbit supporting replicas?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_RABBIT}"
          memory: ${ASSIGNED_MEMORY_RABBIT}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  redis:
    deploy:
      # Is redis supporting replicas?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_REDIS}"
          memory: ${ASSIGNED_MEMORY_REDIS}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  flower:
    deploy:
      # Are replicas needed? And supported?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_FLOWER}"
          memory: ${ASSIGNED_MEMORY_FLOWER}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  swaggerui:
    deploy:
      replicas: ${DEFAULT_SCALE_SWAGGERUI}
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_SWAGGERUI}"
          memory: ${ASSIGNED_MEMORY_SWAGGERUI}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  adminer:
    deploy:
      # Are replicas needed? And supported?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_ADMINER}"
          memory: ${ASSIGNED_MEMORY_ADMINER}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  ftp:
    deploy:
      # Is proftp supporting replicas?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_FTP}"
          memory: ${ASSIGNED_MEMORY_FTP}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  smtp:
    deploy:
      # Is smtp supporting replicas?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_SMTP}"
          memory: ${ASSIGNED_MEMORY_SMTP}
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  registry:
    deploy:
      # Are replicas needed?
      replicas: 1
      resources:
        reservations:
          cpus: "${ASSIGNED_CPU_REGISTRY}"
          memory: ${ASSIGNED_MEMORY_REGISTRY}
      placement:
        constraints:
          - "node.role==manager"
    # logging:
    #   options:
    #     syslog-address: ${SYSLOG_ADDRESS}

  fail2ban:
    deploy:
      # Mode global with no contrains => 1 instance per node
      mode: global
      # placement:
      #   constraints:
      #     - "node.role==manager"

    # network_mode does not work in swarm mode
    # This external network is a workaround to let the container access the host network
    networks:
      - outside

networks:
  outside:
    name: "host"
    external: true
