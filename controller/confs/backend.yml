version: "3.2"

# #####################
# VOLUMES
# #####################

volumes:
  secrets:
    driver: local
  rabbitdata:
    driver: local
  sqldata:
    driver: local
  mariadb:
    driver: local
  graphdata:
    driver: local
  mongodata:
    driver: local
  data_imports:
    driver: local
  pureftpd:
    driver: local
  letsencrypt_certs:
    driver: local
  ssl_dhparam:
    driver: local
  flower_db:
    driver: local
  celerybeat:
    driver: local
  redisdata:
    driver: local

# #####################
# NETWORKS
# #####################

networks:
  default:
    driver_opts:
      com.docker.network.driver.mtu: ${NETWORK_MTU}

  app_net:
    driver_opts:
      com.docker.network.driver.mtu: ${NETWORK_MTU}

  proxy_net:
    driver_opts:
      com.docker.network.driver.mtu: ${NETWORK_MTU}

  worker_net:
    driver_opts:
      com.docker.network.driver.mtu: ${NETWORK_MTU}

  ftp_net:
    driver_opts:
      com.docker.network.driver.mtu: ${NETWORK_MTU}

  db_net:
    driver_opts:
      com.docker.network.driver.mtu: ${NETWORK_MTU}
    # # driver: bridge
    # ipam:
    #   driver: default
    #   config:
    #     # Note: use this configuration to match inside internal rules
    #     # TOFIX: make this an env variable
    #     - subnet: ${DB_SUBNET}/16

# #####################
# SERVICES
# #####################
services:
  ########################
  ###  MAIN CONTAINER  ###
  ########################
  backend:
    # restart: on-failure:5
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    hostname: backend-server
    privileged: ${DOCKER_PRIVILEGED_MODE}
    environment:
      ACTIVATE: ${ACTIVATE_BACKEND}
      APP_MODE: ${APP_MODE}
      LOGURU_LEVEL: ${LOG_LEVEL}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      PYTHON_PATH: ${PYTHON_PATH}
      CRONTAB_ENABLE: ${CRONTAB_ENABLE}
      GZIP_COMPRESSION_ENABLE: ${GZIP_COMPRESSION_ENABLE}
      GZIP_COMPRESSION_THRESHOLD: ${GZIP_COMPRESSION_THRESHOLD}
      GZIP_COMPRESSION_LEVEL: ${GZIP_COMPRESSION_LEVEL}

      FLASK_APP: ${PYTHON_PATH}/restapi/${PYTHON_MAIN_FILE}.py
      FLASK_ENV: ${FLASK_ENV}
      # used by gunicorn
      APP_MODULE: "restapi.${PYTHON_MAIN_FILE}:app"
      GUNICORN_WORKERS: ${GUNICORN_WORKERS}
      GUNICORN_WORKERS_PER_CORE: ${GUNICORN_WORKERS_PER_CORE}
      GUNICORN_MAX_NUM_WORKERS: ${GUNICORN_MAX_NUM_WORKERS}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      APP_SECRETS: ${APP_SECRETS}
      UPLOAD_PATH: ${UPLOAD_PATH}
      DATA_IMPORT_FOLDER: ${DATA_IMPORT_FOLDER}
      DOMAIN: ${PROJECT_DOMAIN}

      # enable /auth/login and /api/admin/users methods
      MAIN_LOGIN_ENABLE: 1
      # base the user/role mechanism on some database
      AUTH_ENABLE: ${ACTIVATE_AUTH}
      AUTH_SERVICE: ${AUTH_SERVICE}
      AUTH_MIN_PASSWORD_LENGTH: ${AUTH_MIN_PASSWORD_LENGTH}
      AUTH_FORCE_FIRST_PASSWORD_CHANGE: ${AUTH_FORCE_FIRST_PASSWORD_CHANGE}
      AUTH_VERIFY_PASSWORD_STRENGTH: ${AUTH_VERIFY_PASSWORD_STRENGTH}
      AUTH_MAX_PASSWORD_VALIDITY: ${AUTH_MAX_PASSWORD_VALIDITY}
      AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER: ${AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER}
      AUTH_MAX_LOGIN_ATTEMPTS: ${AUTH_MAX_LOGIN_ATTEMPTS}
      AUTH_LOGIN_BAN_TIME: ${AUTH_LOGIN_BAN_TIME}
      AUTH_SECOND_FACTOR_AUTHENTICATION: ${AUTH_SECOND_FACTOR_AUTHENTICATION}
      AUTH_DEFAULT_USERNAME: ${AUTH_DEFAULT_USERNAME}
      AUTH_DEFAULT_PASSWORD: ${AUTH_DEFAULT_PASSWORD}
      AUTH_JWT_TOKEN_TTL: ${AUTH_JWT_TOKEN_TTL}
      AUTH_TOKEN_SAVE_FREQUENCY: ${AUTH_TOKEN_SAVE_FREQUENCY}
      AUTH_TOKEN_IP_GRACE_PERIOD: ${AUTH_TOKEN_IP_GRACE_PERIOD}
      # Only used for testing purpose
      AUTH_TESTING_TOTP_HASH:
      ALLOW_ACCESS_TOKEN_PARAMETER: ${ALLOW_ACCESS_TOKEN_PARAMETER}
      ALLOW_PASSWORD_RESET: ${ALLOW_PASSWORD_RESET}
      ALLOW_REGISTRATION: ${ALLOW_REGISTRATION}

      REGISTRATION_NOTIFICATIONS: ${REGISTRATION_NOTIFICATIONS}
      DEBUG_ENDPOINTS: 0
      FORCE_PRODUCTION_TESTS: ${FORCE_PRODUCTION_TESTS}

      ALCHEMY_ENABLE: ${ACTIVATE_ALCHEMY}
      ALCHEMY_ENABLE_CONNECTOR: ${ALCHEMY_ENABLE_CONNECTOR}
      ALCHEMY_EXPIRATION_TIME: ${ALCHEMY_EXPIRATION_TIME}
      ALCHEMY_VERIFICATION_TIME: ${ALCHEMY_VERIFICATION_TIME}
      ALCHEMY_HOST: ${ALCHEMY_HOST}
      ALCHEMY_PORT: ${ALCHEMY_PORT}
      ALCHEMY_USER: ${ALCHEMY_USER}
      ALCHEMY_PASSWORD: ${ALCHEMY_PASSWORD}
      ALCHEMY_DB: ${ALCHEMY_DB}
      ALCHEMY_POOLSIZE: ${ALCHEMY_POOLSIZE}
      ALCHEMY_DBTYPE: ${ALCHEMY_DBTYPE}
      ALEMBIC_AUTO_MIGRATE: ${ALEMBIC_AUTO_MIGRATE}

      NEO4J_ENABLE: ${ACTIVATE_NEO4J}
      NEO4J_ENABLE_CONNECTOR: ${NEO4J_ENABLE_CONNECTOR}
      NEO4J_EXPIRATION_TIME: ${NEO4J_EXPIRATION_TIME}
      NEO4J_VERIFICATION_TIME: ${NEO4J_VERIFICATION_TIME}
      NEO4J_HOST: ${NEO4J_HOST}
      NEO4J_PORT: ${NEO4J_BOLT_PORT}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}

      MONGO_ENABLE: ${ACTIVATE_MONGODB}
      MONGO_ENABLE_CONNECTOR: ${MONGO_ENABLE_CONNECTOR}
      MONGO_EXPIRATION_TIME: ${MONGO_EXPIRATION_TIME}
      MONGO_VERIFICATION_TIME: ${MONGO_VERIFICATION_TIME}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      CELERY_ENABLE: ${ACTIVATE_CELERY}
      CELERY_ENABLE_CONNECTOR: ${CELERY_ENABLE_CONNECTOR}
      CELERY_EXPIRATION_TIME: ${CELERY_EXPIRATION_TIME}
      CELERY_VERIFICATION_TIME: ${CELERY_VERIFICATION_TIME}
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
      CELERYBEAT_ENABLED: ${ACTIVATE_CELERYBEAT}
      # CELERYBEAT_ENABLE_CONNECTOR: ${CELERYBEAT_ENABLE_CONNECTOR}

      RABBITMQ_ENABLE: ${ACTIVATE_RABBIT}
      RABBITMQ_ENABLE_CONNECTOR: ${RABBITMQ_ENABLE_CONNECTOR}
      RABBITMQ_EXPIRATION_TIME: ${RABBITMQ_EXPIRATION_TIME}
      RABBITMQ_VERIFICATION_TIME: ${RABBITMQ_VERIFICATION_TIME}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      # backend can use this port to use management's APIs
      RABBITMQ_MANAGEMENT_PORT: ${RABBITMQ_MANAGEMENT_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_SSL_ENABLED: ${RABBITMQ_SSL_ENABLED}

      REDIS_ENABLE: ${ACTIVATE_REDIS}
      REDIS_ENABLE_CONNECTOR: ${REDIS_ENABLE_CONNECTOR}
      REDIS_EXPIRATION_TIME: ${REDIS_EXPIRATION_TIME}
      REDIS_VERIFICATION_TIME: ${REDIS_VERIFICATION_TIME}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      PUSHPIN_ENABLE: ${ACTIVATE_PUSHPIN}
      PUSHPIN_ENABLE_CONNECTOR: ${PUSHPIN_ENABLE_CONNECTOR}
      PUSHPIN_EXPIRATION_TIME: ${PUSHPIN_EXPIRATION_TIME}
      PUSHPIN_VERIFICATION_TIME: ${PUSHPIN_VERIFICATION_TIME}
      PUSHPIN_HOST: ${PUSHPIN_HOST}
      PUSHPIN_PORT: ${PUSHPIN_CONTROL_PORT}

      SMTP_ENABLE: ${ACTIVATE_SMTP}
      SMTP_ENABLE_CONNECTOR: ${SMTP_ENABLE_CONNECTOR}
      SMTP_EXPIRATION_TIME: ${SMTP_EXPIRATION_TIME}
      SMTP_VERIFICATION_TIME: ${SMTP_VERIFICATION_TIME}
      SMTP_ADMIN: ${SMTP_ADMIN}
      SMTP_NOREPLY: ${SMTP_NOREPLY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

      TELEGRAM_ENABLE: ${ACTIVATE_TELEGRAM}
      TELEGRAM_API_KEY: ${TELEGRAM_API_KEY}
      TELEGRAM_ADMINS: ${TELEGRAM_ADMINS}
      TELEGRAM_USERS: ${TELEGRAM_USERS}
      TELEGRAM_WORKERS: ${TELEGRAM_WORKERS}
      TELEGRAM_BACKEND_HOST: ${FLASK_HOST}
      TELEGRAM_APP_HASH: ${TELEGRAM_APP_HASH}
      TELEGRAM_APP_ID: ${TELEGRAM_APP_ID}
      TELEGRAM_BOTNAME: ${TELEGRAM_BOTNAME}
      TELETHON_SESSION: ${TELETHON_SESSION}

      SENTRY_URL: ${SENTRY_URL}
      RUN_SCHEMATHESIS: ${RUN_SCHEMATHESIS}
      MAX_LOGS_LENGTH: ${MAX_LOGS_LENGTH}

    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/do/controller/confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      - secrets:${APP_SECRETS}
      - letsencrypt_certs:/etc/letsencrypt
      - data_imports:${DATA_IMPORT_FOLDER}
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${BASE_PROJECT_DIR}/backend:/code/${EXTENDED_PROJECT}
      - ${BASE_PROJECT_DIR}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # submodules
      - ${SUBMODULE_DIR}/http-api/restapi:${PYTHON_PATH}/restapi
      # Unit tests
      - ${SUBMODULE_DIR}/http-api/tests:/code/tests
      - ${PROJECT_DIR}/backend/tests:/code/tests/custom
      # Logs
      - ${VANILLA_DIR}/data/logs:/logs
      # Crontabs (only used if enabled)
      - ${PROJECT_DIR}/backend/cron:/etc/cron.rapydo
      # Upload dir (matches the $UPLOAD_PATH env variable in the default configuration)
      - ${VANILLA_DIR}/data/uploads:/uploads
    networks:
      app_net:
        aliases:
          - ${FLASK_HOST}
      db_net:
      worker_net:
      proxy_net:
        aliases:
          - ${FLASK_HOST}

  proxy:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/proxy
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/proxy:${RAPYDO_VERSION}
    hostname: proxy
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
    networks:
      proxy_net:
        aliases:
          - ${PROXY_HOST}
      app_net:
    ports:
      - ${PROXY_DEV_PORT}:80 # 80 redirect
      - ${PROXY_PROD_PORT}:443 # 443 SSL
    environment:
      APP_MODE: ${APP_MODE}
      DOMAIN: ${PROJECT_DOMAIN}
      DOMAIN_ALIASES: ${DOMAIN_ALIASES}
      ACTIVATE: ${ACTIVATE_PROXY}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      SMTP_ADMIN: ${SMTP_ADMIN}
      DEFAULT_DHLEN: ${DEFAULT_DHLEN}
      FRONTEND: ${FRONTEND_FRAMEWORK}
      UNSAFE_EVAL: ${SET_UNSAFE_EVAL}
      UNSAFE_INLINE: ${SET_UNSAFE_INLINE}
      STYLE_UNSAFE_INLINE: ${SET_STYLE_UNSAFE_INLINE}
      CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN}
      CSP_SCRIPT_SRC: ${SET_CSP_SCRIPT_SRC}
      CSP_IMG_SRC: ${SET_CSP_IMG_SRC}
      CSP_FONT_SRC: ${SET_CSP_FONT_SRC}
      CSP_CONNECT_SRC: ${SET_CSP_CONNECT_SRC}
      MAX_REQUESTS_PER_SECOND_AUTH: ${SET_MAX_REQUESTS_PER_SECOND_AUTH}
      MAX_REQUESTS_PER_SECOND_API: ${SET_MAX_REQUESTS_PER_SECOND_API}
      MAX_REQUESTS_PER_SECOND_ASSETS: ${SET_MAX_REQUESTS_PER_SECOND_ASSETS}
      GA_TRACKING_CODE: ${GA_TRACKING_CODE}
    # depends_on:
    #   - backend

  maintenance:
    # restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/proxy
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/proxy:${RAPYDO_VERSION}
    entrypoint: docker-entrypoint-maintenanance
    hostname: proxy
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
    networks:
      proxy_net:
        aliases:
          - ${PROXY_HOST}
      app_net:
    ports:
      - ${PROXY_DEV_PORT}:80 # 80 redirect
      - ${PROXY_PROD_PORT}:443 # 443 SSL
    environment:
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}

  ###################
  ###  DATABASES  ###
  ###################
  postgres:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/postgres
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/postgres:${RAPYDO_VERSION}

    command: postgres -c max_connections=${POSTGRES_MAX_CONNECTIONS} -c shared_buffers=${POSTGRES_SHARED_BUFFERS} -c wal_buffers=${POSTGRES_WAL_BUFFERS} -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE} -c work_mem=${POSTGRES_WORK_MEM} -c maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM} -c effective_io_concurrency=${POSTGRES_EFFECTIVE_IO_CONCURRENCY} -c max_worker_processes=${POSTGRES_MAX_WORKER_PROCESSES} -c max_parallel_workers=${POSTGRES_MAX_WORKER_PROCESSES}
    volumes:
      - sqldata:/var/lib/postgresql
      - ${VANILLA_DIR}/data/backup:/backup
    environment:
      ACTIVATE: ${ACTIVATE_POSTGRES}
      POSTGRES_USER: "${ALCHEMY_USER}"
      POSTGRES_PASSWORD: "${ALCHEMY_PASSWORD}"
      POSTGRES_DBS: ${ALCHEMY_DBS}
      PGDATA: /var/lib/postgresql/current
    networks:
      db_net:
        aliases:
          - ${ALCHEMY_HOST}

  mariadb:
    restart: always
    image: mariadb:10.5.9
    volumes:
      - mariadb:/var/lib/mysql
      - ${VANILLA_DIR}/data/backup:/backup
    environment:
      ACTIVATE: ${ACTIVATE_MYSQL}
      # MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${ALCHEMY_USER}"
      MYSQL_PASSWORD: "${ALCHEMY_PASSWORD}"
      MYSQL_DATABASE: ${ALCHEMY_DB}
    networks:
      db_net:
        aliases:
          - ${ALCHEMY_HOST}

  neo4j:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/neo4j
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/neo4j:${RAPYDO_VERSION}
    volumes:
      - graphdata:/data
      # it is used to enable SSL in production mode
      - letsencrypt_certs:/ssl
      - data_imports:/var/lib/neo4j/import
      - ${VANILLA_DIR}/data/backup:/backup
    networks:
      db_net:
        aliases:
          - ${NEO4J_HOST}
    environment:
      ACTIVATE: ${ACTIVATE_NEO4J}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
      NEO4J_USERNAME: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      SECURE_FILE_PERMISSIONS: "yes"
      NEO4J_dbms_allow__upgrade: ${NEO4J_ALLOW_UPGRADE}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_SIZE}
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_SIZE}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE}
      # Useful in case of corrupted transaction logs
      NEO4J_unsupported_dbms_tx__log_fail__on__corrupted__log__files: ${NEO4J_RECOVERY_MODE}
      NEO4J_dbms_recovery_fail__on__missing__files: ${NEO4J_RECOVERY_MODE}

      # If the following variables will ever change, fix the check_ssl.sh script in neo4j build
      NEO4J_dbms_ssl_policy_bolt_enabled: ${NEO4J_SSL_ENABLED}
      NEO4J_dbms_ssl_policy_https_enabled: ${NEO4J_SSL_ENABLED}
      NEO4J_dbms_ssl_policy_bolt_base__directory: /ssl/real
      NEO4J_dbms_ssl_policy_https_base__directory: /ssl/real
      NEO4J_dbms_ssl_policy_bolt_private__key: privkey1.pem
      NEO4J_dbms_ssl_policy_https_private__key: privkey1.pem
      NEO4J_dbms_ssl_policy_bolt_public__certificate: fullchain1.pem
      NEO4J_dbms_ssl_policy_https_public__certificate: fullchain1.pem
      NEO4J_dbms_connector_https_enabled: ${NEO4J_SSL_ENABLED}
      NEO4J_dbms_connector_bolt_listen__address: ":7687"
      NEO4J_dbms_connector_http_listen__address: ":7474"
      NEO4J_dbms_connector_https_listen__address: ":7473"
      NEO4J_dbms_connector_bolt_tls__level: ${NEO4J_BOLT_TLS_LEVEL}
      # Prevent the following error:
      # Note that since you did not explicitly set the port in
      # dbms.connector.http(s).advertised_address Neo4j automatically set it to 7474(3)
      # to match dbms.connector.http(s).listen_address. This behavior may change in the
      # future and we recommend you to explicitly set it.
      NEO4J_dbms_connector_bolt_advertised__address: ":7687"
      NEO4J_dbms_connector_http_advertised__address: ":7474"
      NEO4J_dbms_connector_https_advertised__address: ":7473"

      # Whether or not clients must be authenticated.
      # Setting this to REQUIRE effectively enables mutual authentication for servers.
      # Available values given to this setting are NONE, OPTIONAL, or REQUIRE.
      # Default value (OPTIONAL for bolt and https) bring to WebSocket connection errors
      # failed: WebSocket opening handshake was canceled
      NEO4J_dbms_ssl_policy_bolt_client__auth: "NONE"
      NEO4J_dbms_ssl_policy_https_client__auth: "NONE"

    # ports:
    #   - 9090:${NEO4J_WEB_INTERFACE_PORT}
    #   - 7687:7687

  mongodb:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/mongodb
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/mongodb:${RAPYDO_VERSION}
    volumes:
      - mongodata:/data/db
    networks:
      db_net:
        aliases:
          - ${MONGO_HOST}
    environment:
      ACTIVATE: ${ACTIVATE_MONGODB}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}

  #########################
  ###  QUEUE MANAGEMENT ###
  #########################

  celery:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    entrypoint: docker-entrypoint-celery
    command: celery --app restapi.connectors.celery.worker.celery_app worker --concurrency=1 -Ofair -Q celery -n ${COMPOSE_PROJECT_NAME}-%h

    # user: developer
    working_dir: /code
    environment:
      APP_MODE: ${APP_MODE}
      LOGURU_LEVEL: ${LOG_LEVEL}
      ACTIVATE: ${ACTIVATE_CELERY}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      UPLOAD_PATH: ${UPLOAD_PATH}
      DOMAIN: ${PROJECT_DOMAIN}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      APP_SECRETS: ${APP_SECRETS}
      FORCE_PRODUCTION_TESTS: ${FORCE_PRODUCTION_TESTS}

      CELERY_ENABLE: 1
      CELERYBEAT_ENABLED: ${ACTIVATE_CELERYBEAT}
      CELERY_EXPIRATION_TIME: ${CELERY_EXPIRATION_TIME}
      CELERY_VERIFICATION_TIME: ${CELERY_VERIFICATION_TIME}

      CELERY_BROKER: ${CELERY_BROKER}
      RABBITMQ_ENABLE: ${ACTIVATE_RABBIT}
      RABBITMQ_ENABLE_CONNECTOR: ${RABBITMQ_ENABLE_CONNECTOR}
      RABBITMQ_EXPIRATION_TIME: ${RABBITMQ_EXPIRATION_TIME}
      RABBITMQ_VERIFICATION_TIME: ${RABBITMQ_VERIFICATION_TIME}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_SSL_ENABLED: ${RABBITMQ_SSL_ENABLED}

      REDIS_ENABLE: ${ACTIVATE_REDIS}
      REDIS_ENABLE_CONNECTOR: ${REDIS_ENABLE_CONNECTOR}
      REDIS_EXPIRATION_TIME: ${REDIS_EXPIRATION_TIME}
      REDIS_VERIFICATION_TIME: ${REDIS_VERIFICATION_TIME}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      CELERY_BACKEND: ${CELERY_BACKEND}

      ALCHEMY_ENABLE: ${ACTIVATE_ALCHEMY}
      ALCHEMY_ENABLE_CONNECTOR: ${ALCHEMY_ENABLE_CONNECTOR}
      ALCHEMY_EXPIRATION_TIME: ${ALCHEMY_EXPIRATION_TIME}
      ALCHEMY_VERIFICATION_TIME: ${ALCHEMY_VERIFICATION_TIME}
      ALCHEMY_HOST: ${ALCHEMY_HOST}
      ALCHEMY_PORT: ${ALCHEMY_PORT}
      ALCHEMY_USER: ${ALCHEMY_USER}
      ALCHEMY_PASSWORD: ${ALCHEMY_PASSWORD}
      ALCHEMY_DB: ${ALCHEMY_DB}
      ALCHEMY_POOLSIZE: ${ALCHEMY_POOLSIZE}
      ALCHEMY_DBTYPE: ${ALCHEMY_DBTYPE}

      NEO4J_ENABLE: ${ACTIVATE_NEO4J}
      NEO4J_ENABLE_CONNECTOR: ${NEO4J_ENABLE_CONNECTOR}
      NEO4J_EXPIRATION_TIME: ${NEO4J_EXPIRATION_TIME}
      NEO4J_VERIFICATION_TIME: ${NEO4J_VERIFICATION_TIME}
      NEO4J_HOST: ${NEO4J_HOST}
      NEO4J_PORT: ${NEO4J_BOLT_PORT}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}

      MONGO_ENABLE: ${ACTIVATE_MONGODB}
      MONGO_ENABLE_CONNECTOR: ${MONGO_ENABLE_CONNECTOR}
      MONGO_EXPIRATION_TIME: ${MONGO_EXPIRATION_TIME}
      MONGO_VERIFICATION_TIME: ${MONGO_VERIFICATION_TIME}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      PUSHPIN_ENABLE: ${ACTIVATE_PUSHPIN}
      PUSHPIN_ENABLE_CONNECTOR: ${PUSHPIN_ENABLE_CONNECTOR}
      PUSHPIN_EXPIRATION_TIME: ${PUSHPIN_EXPIRATION_TIME}
      PUSHPIN_VERIFICATION_TIME: ${PUSHPIN_VERIFICATION_TIME}
      PUSHPIN_HOST: ${PUSHPIN_HOST}
      PUSHPIN_PORT: ${PUSHPIN_CONTROL_PORT}

      SMTP_ENABLE: ${ACTIVATE_SMTP}
      SMTP_ENABLE_CONNECTOR: ${SMTP_ENABLE_CONNECTOR}
      SMTP_EXPIRATION_TIME: ${SMTP_EXPIRATION_TIME}
      SMTP_VERIFICATION_TIME: ${SMTP_VERIFICATION_TIME}
      SMTP_ADMIN: ${SMTP_ADMIN}
      SMTP_NOREPLY: ${SMTP_NOREPLY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/do/controller/confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      - letsencrypt_certs:/etc/letsencrypt
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${BASE_PROJECT_DIR}/backend:/code/${EXTENDED_PROJECT}
      - ${BASE_PROJECT_DIR}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # submodules
      - ${SUBMODULE_DIR}/http-api/restapi:${PYTHON_PATH}/restapi
      # Logs
      - ${VANILLA_DIR}/data/logs:/logs
      # Upload dir (matches the $UPLOAD_PATH env variable in the default configuration)
      - ${VANILLA_DIR}/data/uploads:/uploads
    networks:
      db_net:
      worker_net:

  celery-beat:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    hostname: celery-beat
    entrypoint: docker-entrypoint-celery
    command: celery --app restapi.connectors.celery.beat.celery_app beat --pidfile /tmp/celerybeat.pid --schedule /beat/celerybeat-schedule --loglevel DEBUG --max-interval 30 --scheduler ${CELERYBEAT_SCHEDULER}

    # user: developer
    working_dir: /code
    environment:
      APP_MODE: ${APP_MODE}
      LOGURU_LEVEL: ${LOG_LEVEL}
      ACTIVATE: ${ACTIVATE_CELERYBEAT}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      DOMAIN: ${PROJECT_DOMAIN}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      APP_SECRETS: ${APP_SECRETS}

      CELERY_ENABLE: 1
      CELERYBEAT_ENABLED: ${ACTIVATE_CELERYBEAT}
      CELERYBEAT_SCHEDULER: ${CELERYBEAT_SCHEDULER}

      CELERY_BROKER: ${CELERY_BROKER}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_SSL_ENABLED: ${RABBITMQ_SSL_ENABLED}

      RABBITMQ_ENABLE: ${ACTIVATE_RABBIT}

      REDIS_ENABLE: ${ACTIVATE_REDIS}
      REDIS_ENABLE_CONNECTOR: ${REDIS_ENABLE_CONNECTOR}
      REDIS_EXPIRATION_TIME: ${REDIS_EXPIRATION_TIME}
      REDIS_VERIFICATION_TIME: ${REDIS_VERIFICATION_TIME}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      CELERY_BACKEND: ${CELERY_BACKEND}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}

      PUSHPIN_ENABLE: ${ACTIVATE_PUSHPIN}
      PUSHPIN_HOST: ${PUSHPIN_HOST}
      PUSHPIN_PORT: ${PUSHPIN_CONTROL_PORT}

      SMTP_ADMIN: ${SMTP_ADMIN}
      SMTP_NOREPLY: ${SMTP_NOREPLY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - celerybeat:/beat
      # configuration files
      - ${SUBMODULE_DIR}/do/controller/confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      - letsencrypt_certs:/etc/letsencrypt
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${BASE_PROJECT_DIR}/backend:/code/${EXTENDED_PROJECT}
      - ${BASE_PROJECT_DIR}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # submodules
      - ${SUBMODULE_DIR}/http-api/restapi:${PYTHON_PATH}/restapi
      # Logs
      - ${VANILLA_DIR}/data/logs:/logs
    networks:
      db_net:
      worker_net:

  rabbit:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/rabbitmq
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/rabbitmq:${RAPYDO_VERSION}
    hostname: rabbit
    environment:
      # CAN BE locally changed by ovverride with:
      ACTIVATE: ${ACTIVATE_RABBIT}
      # ACTIVATE: ${ACTIVATE_CELERY}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_ENABLE_SHOVEL_PLUGIN: ${RABBITMQ_ENABLE_SHOVEL_PLUGIN}

      # If the following variables will ever change, fix the check_ssl.sh script in rabbitmq build
      RABBITMQ_SSL_CACERTFILE: ${RABBITMQ_SSL_CERTFILE}
      RABBITMQ_SSL_CERTFILE: ${RABBITMQ_SSL_CERTFILE}
      RABBITMQ_SSL_KEYFILE: ${RABBITMQ_SSL_KEYFILE}
      RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: ${RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT}

      RABBITMQ_MANAGEMENT_SSL_CACERTFILE: ${RABBITMQ_SSL_CERTFILE}
      RABBITMQ_MANAGEMENT_SSL_CERTFILE: ${RABBITMQ_SSL_CERTFILE}
      RABBITMQ_MANAGEMENT_SSL_KEYFILE: ${RABBITMQ_SSL_KEYFILE}
      RABBITMQ_MANAGEMENT_SSL_FAIL_IF_NO_PEER_CERT: ${RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT}

      RABBITMQ_CTL_ERL_ARGS: "-proto_dist inet_tls"

    volumes:
      - rabbitdata:/var/lib/rabbitmq
      - letsencrypt_certs:/ssl
      - ${VANILLA_DIR}/data/backup:/backup
    networks:
      worker_net:
        aliases:
          - ${RABBITMQ_HOST}

  redis:
    restart: always
    image: redis:6.2.2
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redisdata:/data
      - ${VANILLA_DIR}/data/backup:/backup
    networks:
      db_net:
        aliases:
          - ${REDIS_HOST}
    environment:
      ACTIVATE: ${ACTIVATE_REDIS}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  bot:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    entrypoint: docker-entrypoint-bot
    hostname: telegram-bot
    privileged: ${DOCKER_PRIVILEGED_MODE}
    environment:
      ACTIVATE: ${ACTIVATE_TELEGRAM}
      APP_MODE: ${APP_MODE}
      LOGURU_LEVEL: ${LOG_LEVEL}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}
      PYTHON_PATH: ${PYTHON_PATH}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      DOMAIN: ${PROJECT_DOMAIN}
      TELEGRAM_ENABLE: ${ACTIVATE_TELEGRAM}
      TELEGRAM_API_KEY: ${TELEGRAM_API_KEY}
      TELEGRAM_ADMINS: ${TELEGRAM_ADMINS}
      TELEGRAM_USERS: ${TELEGRAM_USERS}
      TELEGRAM_WORKERS: ${TELEGRAM_WORKERS}
      TELEGRAM_BACKEND_HOST: ${FLASK_HOST}
      TELEGRAM_APP_HASH: ${TELEGRAM_APP_HASH}
      TELEGRAM_APP_ID: ${TELEGRAM_APP_ID}
      TELEGRAM_BOTNAME: ${TELEGRAM_BOTNAME}
      TELETHON_SESSION: ${TELETHON_SESSION}

    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/do/controller/confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      - secrets:${APP_SECRETS}
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${BASE_PROJECT_DIR}/backend:/code/${EXTENDED_PROJECT}
      - ${BASE_PROJECT_DIR}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # submodules
      - ${SUBMODULE_DIR}/http-api/restapi:${PYTHON_PATH}/restapi
      # Logs
      - ${VANILLA_DIR}/data/logs:/logs
    networks:
      app_net:

  ##########################
  ### SERVICE INTERFACES ###
  ##########################

  flower:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    entrypoint: docker-entrypoint-celery
    # user: root
    command: flower --basic_auth=${CELERYUI_USER}:${CELERYUI_PASSWORD} --port=${CELERYUI_PORT} --persistent --db=${CELERYUI_DBDIR}/flower ${CELERYUI_SSL_OPTIONS} -A restapi.connectors.celery.worker.celery_app -n flower_monitor
    hostname: flower
    working_dir: /code
    expose:
      - ${CELERYUI_PORT}
    ports:
      - ${CELERYUI_PORT}:${CELERYUI_PORT}
    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/do/controller/confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      - letsencrypt_certs:/etc/letsencrypt
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${BASE_PROJECT_DIR}/backend:/code/${EXTENDED_PROJECT}
      - ${BASE_PROJECT_DIR}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # it is used to enable SSL in production mode
      - letsencrypt_certs:/ssl
      # submodules
      - ${SUBMODULE_DIR}/http-api/restapi:${PYTHON_PATH}/restapi
      # Logs
      - ${VANILLA_DIR}/data/logs:/logs
      # DB
      - flower_db:${CELERYUI_DBDIR}
    networks:
      db_net:
      worker_net:
    # depends_on:
    #   - rabbit
    environment:
      APP_MODE: ${APP_MODE}
      LOGURU_LEVEL: ${LOG_LEVEL}
      ACTIVATE: ${ACTIVATE_CELERYUI}
      CURRENT_UID: ${CURRENT_UID}
      CURRENT_GID: ${CURRENT_GID}

      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      APP_SECRETS: ${APP_SECRETS}

      CELERY_ENABLE: 1

      CELERY_BROKER: ${CELERY_BROKER}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_SSL_ENABLED: ${RABBITMQ_SSL_ENABLED}

      RABBITMQ_ENABLE: ${ACTIVATE_RABBIT}

      REDIS_ENABLE: ${ACTIVATE_REDIS}
      REDIS_ENABLE_CONNECTOR: ${REDIS_ENABLE_CONNECTOR}
      REDIS_EXPIRATION_TIME: ${REDIS_EXPIRATION_TIME}
      REDIS_VERIFICATION_TIME: ${REDIS_VERIFICATION_TIME}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      CELERY_BACKEND: ${CELERY_BACKEND}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}

      CELERYUI_PORT: ${CELERYUI_PORT}
      CELERYUI_USER: ${CELERYUI_USER}
      CELERYUI_PASSWORD: ${CELERYUI_PASSWORD}
      CELERYUI_DBDIR: ${CELERYUI_DBDIR}

  swaggerui:
    build:
      context: ${SUBMODULE_DIR}/build-templates/swaggerui
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/swaggerui:${RAPYDO_VERSION}
    environment:
      ACTIVATE: ${ACTIVATE_SWAGGERUI}
      APP_MODE: ${APP_MODE}
      DOMAIN: ${PROJECT_DOMAIN}
      BACKEND_PORT: ${BACKEND_PORT}
      PROJECT_TITLE: ${PROJECT_TITLE}

    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
    ports:
      - 7777:8080

  adminer:
    # image: adminer:4.7.7-standalone
    # restart: no
    build:
      context: ${SUBMODULE_DIR}/build-templates/adminer
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
        CURRENT_GID: ${CURRENT_GID}
    image: rapydo/adminer:${RAPYDO_VERSION}
    # user: adminer
    networks:
      db_net:
    environment:
      ACTIVATE: ${ACTIVATE_SQLALCHEMYUI}
      APP_MODE: ${APP_MODE}
      # https://github.com/vrana/adminer/tree/master/designs
      # some choices: brade, ng9, pepa-linha
      ADMINER_DESIGN: pepa-linha
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
    ports:
      - 7777:80

  ###################
  ### FTP SERVER  ###
  ###################
  ftp:
    restart: always
    build: ${SUBMODULE_DIR}/build-templates/ftp
    image: rapydo/ftp:${RAPYDO_VERSION}
    volumes:
      - pureftpd:/etc/pure-ftpd/passwd
    # /etc/ssl/private/ A directory containing a single pure-ftpd.pem file
    # with the server's SSL certificates for TLS support. Optional TLS is
    # automatically enabled when the container finds this file on startup.
    environment:
      ACTIVATE: ${ACTIVATE_FTP}
      PUBLICHOST: ${PROJECT_DOMAIN}
      ADDED_FLAGS: -d -d
    networks:
      ftp_net:

  ###################
  ### SMTP SERVER  ###
  ###################
  smtp:
    restart: always
    image: namshi/smtp:latest
    # volumes:
    #   - ...
    environment:
      ACTIVATE: ${ACTIVATE_SMTP_SERVER}
    networks:
      app_net:
        aliases:
          - ${SMTP_SERVER_HOST}

  ####################################
  ### REVERSE PROXY FOR WEBSOCKETS ###
  ####################################

  pushpin:
    restart: always
    image: fanout/pushpin:1.31.0
    environment:
      ACTIVATE: ${ACTIVATE_PUSHPIN}
    networks:
      app_net:
        aliases:
          - ${PUSHPIN_HOST}
      worker_net:
        aliases:
          - ${PUSHPIN_HOST}

    ports:
      - 7999:7999
    volumes:
      - ${SUBMODULE_DIR}/do/controller/confs/pushpin/routes:/etc/pushpin/routes
