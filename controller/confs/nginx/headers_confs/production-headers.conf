
# Protection against Clickjacking (an attack that occurs when an attacker uses a transparent iframe in a window to trick a user into clicking on a CTA, such as a button or link, to another server in which they have an identical looking window. The attacker in a sense hijacks the clicks meant for the original server and sends them to the other server. X-Frame-Options "DENY" prevent the web page to be loaded on a frame
add_header x-frame-options "DENY" always;

# enable the cross-site scripting (XSS) filter 
# built into modern web browsers
add_header x-xss-protection "1; mode=block" always;

# prevents Internet Explorer and Google Chrome from sniffing a # response away from the declared content-type.
# This helps reduce the danger of drive-by downloads and helps 
# treat the content the right way
add_header X-Content-Type-Options "nosniff" always;

# config to enable HSTS(HTTP Strict Transport Security)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;" always;

# Content Security Policy (CSP) is an HTTP header that allows
# site operators fine-grained control over where resources on 
# their site can be loaded from.
# The primary benefit of CSP comes from disabling the use 
# of unsafe inline JavaScript
add_header Content-Security-Policy "frame-ancestors 'none'; base-uri 'self'; default-src 'none'; script-src 'self' ${UNSAFE_EVAL} ${CSP_SCRIPT_SRC}; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data: blob: https://developers.google.com https://via.placeholder.com https://www.google-analytics.com ${CSP_IMG_SRC}; connect-src 'self' ws://${DOMAIN}:* https://cors-anywhere.herokuapp.com https://sentry.io https://www.google-analytics.com; media-src 'self'; form-action 'self'" always;

# The browser will only set the referrer header on requests 
# to the same origin. If the destination is another origin
# then no referrer information will be sent.
add_header Referrer-Policy same-origin always;

# This header will allow a site to enable or disable
# certain browser features.
add_header Feature-Policy "geolocation *; midi 'self'; sync-xhr 'self'; microphone 'self'; camera 'self'; magnetometer 'self'; gyroscope 'self'; speaker 'self'; fullscreen 'self'; payment 'self'" always; 

# ### CORS

# 1. Allow any origin

set $ALLOWED_ORIGIN "${DOMAIN}";  
# if ($http_origin ~ '^https?://localhost$') {
# if ($http_origin ~ '^https?://(localhost|alt\.domain)$') {
#   set $ALLOWED_ORIGIN "$http_origin";
# }
set $ENABLE_ALL_ORIGINS ${CORS_ALLOW_ALL_ORIGINS};
if ($ENABLE_ALL_ORIGINS = "1") {
  set $ALLOWED_ORIGIN "*";
}
add_header 'Access-Control-Allow-Origin' '${ALLOWED_ORIGIN}' always;

# If the server sends a response with an Access-Control-Allow-Origin value that is an explicit origin (rather than the "*" wildcard), then the response should also include a Vary response header with the value Origin â€” to indicate to browsers that server responses can differ based on the value of the Origin request header.

add_header 'Vary' 'Origin' always;

# 2. Credentials can be cookies, authorization headers or TLS client certificates

add_header 'Access-Control-Allow-Credentials' 'true' always;

# 3. What methods should be allowed when accessing the resource in response to a preflight request

add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, HEAD' always;

# 4. Access-Control-Allow-Headers response header is used in response to a preflight request to indicate which HTTP headers can be used during the actual request.

add_header 'Access-Control-Allow-Headers' "Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization" always;

# 5. Tell client that this pre-flight info is valid for 10 minutes

add_header 'Access-Control-Max-Age' 600 always;
