variables:
  submodules:
    http-api:
      online_url: https://github.com/rapydo/http-api.git
    build-templates:
      online_url: https://github.com/rapydo/build-templates.git
    rapydo-angular:
      online_url: https://github.com/rapydo/rapydo-angular.git
      _if: $$angular
    do:
      online_url: https://github.com/rapydo/do.git

  roles:
    admin_root: Admin
    staff_user: Staff
    group_coordinator: Coordinator
    normal_user: User
    default: normal_user

  roles_descriptions:
    admin_root: System Administrator
    staff_user: Project Administrator
    group_coordinator: Group Coordinator
    normal_user: Normal User

  env:
    BACKEND_BUILD_MODE: backend
    FRONTEND_FRAMEWORK: nofrontend
    FRONTEND_BUILD_MODE: angular # or angular-test
    NETWORK_MTU: 1500
    HEALTHCHECK_INTERVAL: "1m"
    # Healtcheck in development is not possibile because the server is not automatically executed
    HEALTHCHECK_BACKEND_CMD: "exit 0" # changed in prod mode to enable a true check

    LOG_LEVEL: DEBUG # log level for backend and celery (in production mode will be set to INFO)
    DOCKER_LOGGING_DRIVER: "json-file"
    FILE_LOGLEVEL: WARNING
    LOG_RETENTION: 180 # in days
    MIN_PASSWORD_SCORE: 2 # raised to 4 in prod mode

    ACTIVATE_BACKEND: 1
    ACTIVATE_PROXY: 0

    ACTIVATE_ALCHEMY: 0
    ACTIVATE_POSTGRES: 0
    ACTIVATE_NEO4J: 0
    ACTIVATE_RABBIT: 0
    ACTIVATE_REDIS: 0

    ACTIVATE_CELERY: 0
    ACTIVATE_CELERYBEAT: 0
    ACTIVATE_FLOWER: 0
    ACTIVATE_FTP: 0
    ACTIVATE_SMTP: 1
    ACTIVATE_SMTP_SERVER: 0

    ACTIVATE_SWAGGERUI: 0
    ACTIVATE_ADMINER: 0
    ACTIVATE_MYPY: 0

    MYPY_DISALLOW_UNTYPED_DEFS: 1
    MYPY_IGNORE_LIBS: ""
    MYPY_ADD_LIBS: ""

    MAX_LOGS_LENGTH: 200

    APP_MODE: development
    FLASK_HOST: apiserver.dockerized.io
    FLASK_DEFAULT_PORT: 8080 # used for Flask biding (into the container)
    FLASK_ENV: development
    API_AUTOSTART: 0 # used in some tests to auto-start the backend
    BACKEND_PORT: 8080 # used for port mapping (outside the container)
    BACKEND_API_PORT: 8080 # used to reach the backend from outer network (in production should much with proxy ssl port)
    BACKEND_URL: ""
    PYTHON_MAIN_FILE: __main__
    # Path to dist-packages in backend/celery containers
    PYTHON_PATH: /usr/local/lib/python3.10/dist-packages

    PYTHONMALLOC: ""
    PYTHONASYNCIODEBUG: 0
    PYTHONFAULTHANDLER: 0

    BACKEND_PREFIX: ""
    APP_SECRETS: /secrets
    DATA_PATH: /uploads
    DATA_IMPORT_FOLDER: /imports
    # from GUNICORN docs:
    # we recommend (2 x $num_cores) + 1 as the number of workers to start off with.
    # the formula is based on the assumption that for a given core, one worker will be
    # reading or writing from the socket while the other worker is processing a request.
    # Obviously, your particular hardware and application are going to affect the optimal
    # number of workers. Our recommendation is to start with the above guess and tune
    # using TTIN and TTOU signals while the application is under load.
    # number of workers will calculated as:
    # $GUNICORN_WORKERS + #cores * $GUNICORN_WORKERS_PER_CORE
    GUNICORN_WORKERS: 1 # total number of workers. if empty this parameter will not be used
    GUNICORN_WORKERS_PER_CORE: 2 # GUNICORN_WORKERS will be calculated as numcore * GUNICORN_WORKERS_PER_CORE
    GUNICORN_MAX_NUM_WORKERS: 24
    CRONTAB_ENABLE: 0
    GZIP_COMPRESSION_ENABLE: 1
    # Enabled gzip compresion for responses with size in bytes >= this threshold
    GZIP_COMPRESSION_THRESHOLD: 1500
    # From 1 to 9, best tradeoffs seem to be 3 (faster) and 7 (better compression)
    GZIP_COMPRESSION_LEVEL: 3
    # Automatically apply flask migrations at backend startup
    ALEMBIC_AUTO_MIGRATE: 1

    PROXY_HOST: myproxy.dockerized.io
    # in production mode this will be mapped on port 80
    PROXY_DEV_PORT: 81
    PROXY_PROD_PORT: 443
    # if 1 an additional proxy or load balancer is assumed and the backend will extract
    # the client IP from the X-Forwarded-For instead of X-Real-IP
    PROXIED_CONNECTION: 0
    DOMAIN_ALIASES:
    SET_UNSAFE_EVAL:
    # SET_UNSAFE_EVAL: "unsafe-eval"
    SET_UNSAFE_INLINE:
    # SET_UNSAFE_INLINE: "unsafe-inline"
    # Still required by:
    #  - ngx-formly/bootstrap addonLeft/addonRight (https://github.com/ngx-formly/ngx-formly/issues/2496)
    #  - cookie-law
    #  - ngx-datatable (for sure in headers)
    # SET_STYLE_UNSAFE_INLINE:
    SET_STYLE_UNSAFE_INLINE: "unsafe-inline"
    SET_CSP_SCRIPT_SRC:
    # SET_CSP_SCRIPT_SRC: "https://www.googletagmanager.com https://www.google-analytics.com"
    SET_CSP_IMG_SRC:
    SET_CSP_FONT_SRC:
    SET_CSP_CONNECT_SRC:
    SET_CSP_FRAME_SRC:
    SET_MAX_REQUESTS_PER_SECOND_AUTH: 2
    SET_MAX_REQUESTS_BURST_AUTH: 2
    SET_MAX_REQUESTS_PER_SECOND_API: 3
    SET_MAX_REQUESTS_BURST_API: 10
    # if empty will be automatically replaced with DOMAIN in proxy entrypoint
    CORS_ALLOWED_ORIGIN:
    # if enabled, make sure to copy client certificates in /etc/letsencrypt/client_certs
    SSL_VERIFY_CLIENT: 0
    SSL_FORCE_SELF_SIGNED: 0

    ALCHEMY_ENABLE_CONNECTOR: 1
    ALCHEMY_EXPIRATION_TIME: 7200
    ALCHEMY_VERIFICATION_TIME: 900
    ALCHEMY_HOST: sql.dockerized.io
    ALCHEMY_PORT: 5432
    ALCHEMY_DBTYPE: "postgresql"
    ALCHEMY_USER: "sqluser" # This default is invalidated in production mode
    ALCHEMY_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    ALCHEMY_DB: SQL_API
    ALCHEMY_DBS: SQL_API
    ALCHEMY_POOLSIZE: 30 # or 20 # (default is 5)

    # Have a look at this website for a quick tuning:
    # https://pgtune.leopard.in.ua
    POSTGRES_MAX_CONNECTIONS: 50 # default increased to 250 in production mode
    # Something like 25% of available RAM
    POSTGRES_SHARED_BUFFERS: 256MB # default increased to 1GB in production mode
    # 16MB is the default, but if you have a lot of concurrent
    # connections then a higher value can give better performance
    POSTGRES_WAL_BUFFERS: 16MB
    # It does not allocate actual memory but tells the optimizer the amount
    # of cache available in the kernel. If the value of this is set too low
    # the query planner can decide not to use some indexes, even if theyâ€™d be helpful.
    # Therefore, setting a large value is always beneficial.
    # Something like 75% of available RAM
    POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB # default increased to 3GB in production mode
    # It is allocated per connection, so high values can cause memory bottlenecks
    POSTGRES_WORK_MEM: 2MB
    # Something like 1/16 of RAM
    POSTGRES_MAINTENANCE_WORK_MEM: 64MB # default increased to 256MB in production mode
    # 1 is the default value.
    # Increase to "hundreds" if you have a SSD or a parallel storage
    # If you can (i.e. if you have an SSD) you really have to increase this value!
    # For SSD a good suggestion is around 200
    POSTGRES_EFFECTIVE_IO_CONCURRENCY: 1
    # Set as the number of core (and not more). Also used to set max_parallel_workers
    POSTGRES_MAX_WORKER_PROCESSES: 1 # default increased to 2 in production mode

    NEO4J_ENABLE_CONNECTOR: 1
    NEO4J_EXPIRATION_TIME: 7200
    NEO4J_VERIFICATION_TIME: 900
    NEO4J_HOST: matrix.dockerized.io
    NEO4J_BOLT_PORT: 7687
    NEO4J_USER: neo4j
    NEO4J_PASSWORD: "D3vMode!" # Setting invalidated in production mode
    NEO4J_EXPOSED_WEB_INTERFACE_PORT: 9090
    NEO4J_WEB_INTERFACE_PORT: 7474 # Changed to 7173 in production mode
    NEO4J_SSL_ENABLED: false # Changed to true in production mode
    # Allowed values: REQUIRED, OPTIONAL, DISABLED. Default value: DISABLED
    NEO4J_BOLT_TLS_LEVEL: "DISABLED" # Changed to OPTIONAL in production mode
    NEO4J_HEAP_SIZE: 512M # Setting invalidated in production mode
    NEO4J_PAGECACHE_SIZE: 512M # Setting invalidated in production mode
    NEO4J_ALLOW_UPGRADE: false
    # Enable this in case of corrupted or missing transaction logs
    NEO4J_RECOVERY_MODE: false

    ELASTIC_HOST: elastic.dockerized.io
    ELASTIC_PORT: 9200

    RABBITMQ_ENABLE_CONNECTOR: 1
    RABBITMQ_EXPIRATION_TIME: 7200
    RABBITMQ_VERIFICATION_TIME: 900
    RABBITMQ_HOST: rabbit.dockerized.io
    RABBITMQ_PORT: 5672
    RABBITMQ_VHOST: "/"
    RABBITMQ_USER: "rabbit" # This default is invalidated in production mode
    RABBITMQ_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    RABBITMQ_MANAGEMENT_PORT: 15672
    RABBITMQ_ENABLE_SHOVEL_PLUGIN: 0
    RABBITMQ_SSL_CERTFILE:
    RABBITMQ_SSL_KEYFILE:
    RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT:
    RABBITMQ_SSL_ENABLED: 0 # it is used by Celery

    REDIS_ENABLE_CONNECTOR: 1
    REDIS_EXPIRATION_TIME: 86400
    REDIS_VERIFICATION_TIME: 3600
    REDIS_HOST: redis.dockerized.io
    REDIS_PORT: 6379
    REDIS_PASSWORD: "D3vMode!" # This default is invalidated in production mode

    FTP_ENABLE_CONNECTOR: 0
    FTP_EXPIRATION_TIME: 7200
    FTP_VERIFICATION_TIME: 3600
    FTP_HOST: ftp.dockerized.io
    FTP_PORT: 21
    FTP_USER: "ftpuser"
    FTP_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    FTP_SSL_ENABLED: 0

    # To be enabled with "manager.host"
    NFS_HOST:
    NFS_EXPORTS_SECRETS: /volumes/secrets
    NFS_EXPORTS_RABBITDATA: /volumes/rabbitdata
    NFS_EXPORTS_SQLDATA: /volumes/sqldata
    NFS_EXPORTS_GRAPHDATA: /volumes/graphdata
    NFS_EXPORTS_DATA_IMPORTS: /volumes/data_imports
    NFS_EXPORTS_PUREFTPD: /volumes/pureftpd
    NFS_EXPORTS_SSL_CERTS: /volumes/ssl_certs
    NFS_EXPORTS_FLOWER_DB: /volumes/flower_db
    NFS_EXPORTS_REDISDATA: /volumes/redisdata

    # Celery
    CELERY_ENABLE_CONNECTOR: 0
    CELERY_EXPIRATION_TIME: 7200
    CELERY_VERIFICATION_TIME: 900
    CELERY_BROKER: REDIS
    CELERY_BACKEND: REDIS
    CELERY_POOL_MODE: prefork

    # Flower
    FLOWER_USER: "flower" # This default is invalidated in production mode
    FLOWER_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    FLOWER_DBDIR: /var/flower
    FLOWER_PORT: 5555
    FLOWER_SSL_OPTIONS:
    FLOWER_PROTOCOL: http # https in production mode, used for healthchecks

    # Swarm
    DEFAULT_SCALE_BACKEND: 1
    DEFAULT_SCALE_CELERY: 1
    DEFAULT_SCALE_CELERYBEAT: 1
    # To allow nginx to access the real client IP it is now deployed in global mode
    # to be able to map the port directly on the host, instead of being load balanced
    # In this way the proxy can no longer be scaled
    # DEFAULT_SCALE_PROXY: 1
    DEFAULT_SCALE_SWAGGERUI: 1

    ASSIGNED_CPU_BACKEND: "0.25"
    ASSIGNED_MEMORY_BACKEND: "20M"
    ASSIGNED_CPU_PROXY: "0.25"
    ASSIGNED_MEMORY_PROXY: "20M"
    ASSIGNED_CPU_POSTGRES: "0.25"
    ASSIGNED_MEMORY_POSTGRES: "20M"
    ASSIGNED_CPU_NEO4J: "0.25"
    ASSIGNED_MEMORY_NEO4J: "20M"
    ASSIGNED_CPU_CELERY: "0.25"
    ASSIGNED_MEMORY_CELERY: "20M"
    ASSIGNED_CPU_CELERYBEAT: "0.25"
    ASSIGNED_MEMORY_CELERYBEAT: "20M"
    ASSIGNED_CPU_RABBIT: "0.25"
    ASSIGNED_MEMORY_RABBIT: "20M"
    ASSIGNED_CPU_REDIS: "0.25"
    ASSIGNED_MEMORY_REDIS: "20M"
    ASSIGNED_CPU_FLOWER: "0.25"
    ASSIGNED_MEMORY_FLOWER: "20M"
    ASSIGNED_CPU_SWAGGERUI: "0.25"
    ASSIGNED_MEMORY_SWAGGERUI: "20M"
    ASSIGNED_CPU_ADMINER: "0.25"
    ASSIGNED_MEMORY_ADMINER: "20M"
    ASSIGNED_CPU_FTP: "0.25"
    ASSIGNED_MEMORY_FTP: "20M"
    ASSIGNED_CPU_SMTP: "0.25"
    ASSIGNED_MEMORY_SMTP: "20M"
    ASSIGNED_CPU_REGISTRY: "0.25"
    ASSIGNED_MEMORY_REGISTRY: "20M"

    # Local docker registry
    REGISTRY_HOST:
    REGISTRY_PORT: 5000
    REGISTRY_USERNAME: docker
    REGISTRY_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    # Automatically set before creating the registry
    REGISTRY_HTTP_SECRET:

    # Fail2ban
    ACTIVATE_FAIL2BAN: 0 # enabled by default in production mode

    # To be enabled with "manager.host"
    # defaulted to local IP of active network interface
    # Note: can only be modified as env variable, not projectrc/-e :\
    SWARM_MANAGER_ADDRESS:
    # SYSLOG_ADDRESS: ""

    # Smtp
    SMTP_ENABLE_CONNECTOR: 1
    SMTP_EXPIRATION_TIME: 7200
    SMTP_VERIFICATION_TIME: 900
    SMTP_ADMIN:
    SMTP_NOREPLY:
    SMTP_HOST:
    SMTP_PORT: 25
    SMTP_USERNAME:
    SMTP_PASSWORD:

    # These two variables should be merged with the variables above
    # i.e. if smtp server is enabled these should be the default values
    # for smtp host and port instead of empty strings
    SMTP_SERVER_HOST: smtp.dockerized.io
    SMTP_SERVER_PORT: 25
    # Note, to be enabled with the following settings are needed:
    # ACTIVATE_SMTP_SERVER: 1
    # SMTP_HOST: smtp.dockerized.io
    # SMTP_PORT: 25
    # SMTP_HOST and SMTP_PORT are needed because not automatically merged with
    # SMTP_SERVER_HOST and SMTP_SERVER_PORT when ACTIVATE_SMTP_SERVER is enabled

    FRONTEND_URL: ""
    FRONTEND_PREFIX: /
    ALLOW_PASSWORD_RESET: 0
    ALLOW_REGISTRATION: 0
    ALLOW_TERMS_OF_USE: 0
    REGISTRATION_NOTIFICATIONS: 1
    SENTRY_URL:
    GA_TRACKING_CODE:
    SHOW_LOGIN: 1
    ENABLE_FOOTER: 1
    ENABLE_ANGULAR_SSR: 1
    ENABLE_YARN_PNP: 0
    FORCE_SSR_SERVER_MODE: 0
    SPINNER_TYPE: "ball-scale-multiple"

    ACTIVATE_AUTH: 1
    AUTH_SERVICE: NO_AUTHENTICATION
    AUTH_DEFAULT_USERNAME: "user@nomail.org"
    AUTH_DEFAULT_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    AUTH_MIN_PASSWORD_LENGTH: 8
    AUTH_FORCE_FIRST_PASSWORD_CHANGE: 0
    AUTH_MAX_PASSWORD_VALIDITY: 0
    AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER: 0
    AUTH_MAX_LOGIN_ATTEMPTS: 8
    # Increased from 1 hour to 12 hours after implementing the unlock token mechanism
    # AUTH_LOGIN_BAN_TIME: 3600
    AUTH_LOGIN_BAN_TIME: 43200
    AUTH_SECOND_FACTOR_AUTHENTICATION: 0
    AUTH_TOTP_VALIDITY_WINDOW: 1 # int value
    AUTH_JWT_TOKEN_TTL: 2592000 # 1 month in seconds
    AUTH_TOKEN_SAVE_FREQUENCY: 60 # tokens are saved every this amount of seconds
    AUTH_TOKEN_IP_GRACE_PERIOD: 1800 # period before starting to evaluate IP address on token validation
    ALLOW_ACCESS_TOKEN_PARAMETER: 0
    DEFAULT_DHLEN: 2048

    FORCE_PRODUCTION_TESTS: 0 # Very dangerous, do not touch it!

project:
  title: "REST HTTP-API server with Python, Flask and Docker"
  description: "No description yet"
  keywords: ""
  rapydo: 2.4
  version: v0.1

tags:
  specifications: OpenAPI 2.0 Specification in JSON format
  status: Verify the status of the server
  authentication: Manage authentication and active tokens
  profile: Manage your own profile
  management: Managent endpoints
