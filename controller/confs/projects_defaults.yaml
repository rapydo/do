variables:
  submodules:
    # IMPORTANT: if you change online_urls here, remember to also fix in develop
    http-api:
      online_url: https://github.com/rapydo/http-api.git
    build-templates:
      online_url: https://github.com/rapydo/build-templates.git
    rapydo-angular:
      online_url: https://github.com/rapydo/rapydo-angular.git
      if: $$angular
    do:
      online_url: https://github.com/rapydo/do.git

  roles:
    normal_user: User
    staff_user: Staff
    group_coordinator: disabled
    admin_root: Admin
    default: normal_user
    # Roles allowed for non-admin users (e.g. coordinator allowed to create users)
    # allowed_roles:
    #   - normal_user
    # List of preauthorized roles with assigned roles
    # preauthorized_users:
    #   yourusername:
    #     - yourrole
    #     - yourrole

  # The list of files to be considered
  composers:
    backend:
      file: backend.yml
      base: True
      path: $$baseconf
      mandatory: True
      if: $$backend
    angular:
      file: angular.yml
      base: True
      path: $$baseconf
      mandatory: True
      if: $$angular
    extended-commons:
      file: commons.yml
      base: False
      path: $$extendedproject
      mandatory: True
      if: $$extended-commons
    extended-mode:
      file: $$mode
      base: False
      path: $$extendedproject
      mandatory: False
      if: $$extended-mode
    commons:
      file: commons.yml
      base: False
      path: $$customconf
      mandatory: True
      if: $$commons
    mode:
      file: $$mode
      base: False
      path: $$customconf
      mandatory: True
      if: True

  env:
    FRONTEND_FRAMEWORK: nofrontend

    ACTIVATE_BACKEND: 1
    ACTIVATE_PROXY: 0

    ACTIVATE_ALCHEMY: 0
    ACTIVATE_POSTGRES: 0
    ACTIVATE_MYSQL: 0
    ACTIVATE_NEO4J: 0
    ACTIVATE_MONGODB: 0
    ACTIVATE_RABBIT: 0
    ACTIVATE_REDIS: 0

    ACTIVATE_CELERY: 0
    ACTIVATE_CELERYUI: 0
    ACTIVATE_CELERYBEAT: 0
    ACTIVATE_FTP: 0
    ACTIVATE_PUSHPIN: 0
    ACTIVATE_SMTP: 1
    ACTIVATE_TELEGRAM: 0

    ACTIVATE_SWAGGERUI: 0
    ACTIVATE_SQLALCHEMYUI: 0
    ACTIVATE_MONGOUI: 0

    RUN_SCHEMATHESIS: 1
    MAX_LOGS_LENGTH: 200

    APP_MODE: development
    FLASK_HOST: apiserver.dockerized.io
    PYTHON_MAIN_FILE: __main__
    # Path to dist-packages in backend/celery containers
    PYTHON_PATH: /usr/local/lib/python3.8/dist-packages
    # from GUNICORN docs:
    # we recommend (2 x $num_cores) + 1 as the number of workers to start off with.
    # the formula is based on the assumption that for a given core, one worker will be
    # reading or writing from the socket while the other worker is processing a request.
    # Obviously, your particular hardware and application are going to affect the optimal
    # number of workers. Our recommendation is to start with the above guess and tune
    # using TTIN and TTOU signals while the application is under load.
    # number of workers will calculated as:
    # $GUNICORN_WORKERS + #cores * $GUNICORN_WORKERS_PER_CORE
    GUNICORN_WORKERS: 1 # total number of workers. if empty this parameter will not be used
    GUNICORN_WORKERS_PER_CORE: 2 # GUNICORN_WORKERS will be calculated as numcore * GUNICORN_WORKERS_PER_CORE
    GUNICORN_MAX_NUM_WORKERS: 24
    CRONTAB_ENABLE: 0
    GZIP_COMPRESSION_ENABLE: 1
    # Enabled gzip compresion for responses with size in bytes >= this threshold
    GZIP_COMPRESSION_THRESHOLD: 1500
    # From 1 to 9, best tradeoffs seem to be 3 (faster) and 7 (better compression)
    GZIP_COMPRESSION_LEVEL: 3

    FRONTEND_BUILD_MODE: angular # or angular-test
    BACKEND_BUILD_MODE: backend

    FLASK_DEFAULT_PORT: 8080 # used for Flask biding (into the container)
    FLASK_ENV: development
    BACKEND_PORT: 8080 # used for port mapping (outside the container)
    BACKEND_API_PORT: 8080 # used to reach the backend from outer network (in production should much with proxy ssl port)
    BACKEND_URI: ""
    FRONTEND_PREFIX: /
    BACKEND_PREFIX: ""
    LOG_LEVEL: DEBUG # log level for backend and celery
    JWT_APP_SECRETS: /jwt_tokens
    UPLOAD_PATH: /uploads

    PROXY_HOST: myproxy.dockerized.io
    # in production mode this will be mapped on port 80
    PROXY_DEV_PORT: 81
    PROXY_PROD_PORT: 443
    # LETSENCRYPT_MODE: --staging
    LETSENCRYPT_MODE:
    DOMAIN_ALIASES:
    SET_UNSAFE_EVAL:
    # SET_UNSAFE_EVAL: "unsafe-eval"
    # Still required by:
    #  - ngx-formly/bootstrap addonLeft/addonRight (https://github.com/ngx-formly/ngx-formly/issues/2496)
    #  - cookie-law
    #  - ngx-datatable (for sure in headers)
    # SET_STYLE_UNSAFE_INLINE:
    SET_STYLE_UNSAFE_INLINE: "unsafe-inline"
    SET_CSP_SCRIPT_SRC:
    # SET_CSP_SCRIPT_SRC: "https://www.googletagmanager.com https://www.google-analytics.com"
    SET_CSP_IMG_SRC:
    SET_CSP_FONT_SRC:
    CORS_ALLOW_ALL_ORIGINS: 1

    ALCHEMY_ENABLE_CONNECTOR: True
    ALCHEMY_EXPIRATION_TIME: 7200
    ALCHEMY_VERIFICATION_TIME: 900
    ALCHEMY_HOST: sql.dockerized.io
    ALCHEMY_PORT: 5432
    ALCHEMY_DBTYPE: "postgresql"
    ALCHEMY_USER: "sqluser" # This default is invalidated in production mode
    ALCHEMY_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    ALCHEMY_DB: SQL_API
    ALCHEMY_DBS: SQL_API
    ALCHEMY_POOLSIZE: 30 # or 20 # (default is 5)

    # Have a look at this website for a quick tuning:
    # https://pgtune.leopard.in.ua
    POSTGRES_MAX_CONNECTIONS: 50 # default increased to 250 in production mode
    # Something like 25% of available RAM
    POSTGRES_SHARED_BUFFERS: 256MB # default increased to 1GB in production mode
    # 16MB is the default, but if you have a lot of concurrent
    # connections then a higher value can give better performance
    POSTGRES_WAL_BUFFERS: 16MB
    # It does not allocate actual memory but tells the optimizer the amount
    # of cache available in the kernel. If the value of this is set too low
    # the query planner can decide not to use some indexes, even if they’d be helpful.
    # Therefore, setting a large value is always beneficial.
    # Something like 75% of available RAM
    POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB # default increased to 3GB in production mode
    # It is allocated per connection, so high values can cause memory bottlenecks
    POSTGRES_WORK_MEM: 2MB
    # Something like 1/16 of RAM
    POSTGRES_MAINTENANCE_WORK_MEM: 64MB # default increased to 256MB in production mode
    # 1 is the default value.
    # Increase to "hundreds" if you have a SSD or a parallel storage
    # If you can (i.e. if you have an SSD) you really have to increase this value!
    # For SSD a good suggestion is around 200
    POSTGRES_EFFECTIVE_IO_CONCURRENCY: 1
    # Set as the number of core (and not more). Also used to set max_parallel_workers
    POSTGRES_MAX_WORKER_PROCESSES: 1 # default increased to 2 in production mode

    NEO4J_ENABLE_CONNECTOR: True
    NEO4J_EXPIRATION_TIME: 7200
    NEO4J_VERIFICATION_TIME: 900
    NEO4J_HOST: matrix.dockerized.io
    NEO4J_BOLT_PORT: 7687
    NEO4J_USER: neo4j
    NEO4J_PASSWORD: "D3vMode!" # Setting invalidated in production mode
    NEO4J_WEB_INTERFACE_PORT: 7474 # Changed to 7173 in production mode
    NEO4J_SSL_ENABLED: false # Changed to true in production mode
    # Allowed values: REQUIRED, OPTIONAL, DISABLED. Default value: DISABLED
    NEO4J_BOLT_TLS_LEVEL: "DISABLED" # Changed to OPTIONAL in production mode
    NEO4J_HEAP_SIZE: 512M # Setting invalidated in production mode
    NEO4J_PAGECACHE_SIZE: 512M # Setting invalidated in production mode
    NEO4J_ALLOW_UPGRADE: false

    MONGO_ENABLE_CONNECTOR: True
    MONGO_EXPIRATION_TIME: 7200
    MONGO_VERIFICATION_TIME: 900
    MONGO_HOST: mongo.dockerized.io
    MONGO_PORT: 27017
    MONGO_DATABASE: rapydo
    MONGO_USER:
    MONGO_PASSWORD:

    ELASTIC_HOST: elastic.dockerized.io
    ELASTIC_PORT: 9200

    RABBITMQ_ENABLE_CONNECTOR: True
    RABBITMQ_EXPIRATION_TIME: 7200
    RABBITMQ_VERIFICATION_TIME: 900
    RABBITMQ_HOST: rabbit.dockerized.io
    RABBITMQ_PORT: 5672
    RABBITMQ_VHOST: "/"
    RABBITMQ_USER: "rabbit" # This default is invalidated in production mode
    RABBITMQ_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    RABBITMQ_MANAGEMENT_PORT: 15672
    RABBITMQ_ENABLE_SHOVEL_PLUGIN: 0
    RABBITMQ_SSL_CERTFILE:
    RABBITMQ_SSL_KEYFILE:
    RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT:
    RABBITMQ_SSL_ENABLED: False # it is used by Celery

    REDIS_ENABLE_CONNECTOR: True
    REDIS_EXPIRATION_TIME: 86400
    REDIS_VERIFICATION_TIME: 3600
    REDIS_HOST: redis.dockerized.io
    REDIS_PORT: 6379

    # Celery
    CELERY_ENABLE_CONNECTOR: True
    CELERY_EXPIRATION_TIME: 7200
    CELERY_VERIFICATION_TIME: 900
    CELERY_BROKER: RABBIT
    CELERY_BACKEND: RABBIT
    CELERYBEAT_ENABLE_CONNECTOR: True

    # Flower
    CELERYUI_USER: "flower" # This default is invalidated in production mode
    CELERYUI_PASSWORD: "D3vMode!" # This default is invalidated in production mode
    CELERYUI_DBDIR: /var/flower
    CELERYUI_PORT: 5555
    CELERYUI_SSL_OPTIONS:

    PUSHPIN_ENABLE_CONNECTOR: True
    PUSHPIN_EXPIRATION_TIME: 7200
    PUSHPIN_VERIFICATION_TIME: 900
    PUSHPIN_HOST: pushpin.dockerized.io
    PUSHPIN_PORT: 7999
    PUSHPIN_CONTROL_PORT: 5561

    SMTP_ENABLE_CONNECTOR: True
    SMTP_EXPIRATION_TIME: 7200
    SMTP_VERIFICATION_TIME: 900
    SMTP_ADMIN:
    SMTP_NOREPLY:
    SMTP_HOST:
    SMTP_PORT:
    SMTP_USERNAME:
    SMTP_PASSWORD:

    ALLOW_PASSWORD_RESET: "false"
    ALLOW_REGISTRATION: "false"
    ALLOW_TERMS_OF_USE: "false"
    REGISTRATION_NOTIFICATIONS: true
    SENTRY_URL:
    GA_TRACKING_CODE:
    ENABLE_FOOTER: false

    ACTIVATE_AUTH: 1
    AUTH_SERVICE: sqlalchemy
    AUTH_MIN_PASSWORD_LENGTH: 8
    AUTH_VERIFY_PASSWORD_STRENGTH: True
    AUTH_FORCE_FIRST_PASSWORD_CHANGE: False
    AUTH_MAX_PASSWORD_VALIDITY: 0
    AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER: 0
    AUTH_MAX_LOGIN_ATTEMPTS: 0
    AUTH_REGISTER_FAILED_LOGIN: False
    AUTH_SECOND_FACTOR_AUTHENTICATION: None
    AUTH_JWT_TOKEN_TTL: 2592000 # 1 month in seconds
    AUTH_TOKEN_SAVE_FREQUENCY: 60 # tokens are saved every this amount of seconds
    ALLOW_ACCESS_TOKEN_PARAMETER: False
    # AUTH_SECOND_FACTOR_AUTHENTICATION: TOTP
    DEFAULT_DHLEN: 2048

    TELEGRAM_API_KEY: "**PLACEHOLDER**"
    TELEGRAM_ADMINS: "**PLACEHOLDER**"
    TELEGRAM_USERS:
    TELEGRAM_WORKERS: 1
    TELEGRAM_APP_HASH:
    TELEGRAM_APP_ID:
    TELEGRAM_BOTNAME:
    TELETHON_SESSION:

    AUTH_DEFAULT_USERNAME: "user@nomail.org"
    AUTH_DEFAULT_PASSWORD: "test"

    FORCE_PRODUCTION_TESTS: 0 # Very dangerous, do not touch it!
    NETWORK_MTU: 1500

project:
  title: REST HTTP-API server with Python, Flask and Docker
  description: No description yet
  rapydo: 0.7.3
  version: v0.1

tags:
  specifications: OpenAPI 2.0 Specification in JSON format
  helpers: tools for checking status and privileges
  authentication: log in and out of the REST API
  profile: Visualize profile for current credentials
