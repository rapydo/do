
# A SSL Server on port 80!

server {

  # SSL server
  listen 80 ssl default_server;
  listen [::]:80 ssl default_server;
  http2 on;
  server_tokens off;

  # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
  proxy_http_version 1.1;

  # Remove the Connection header if the client sends it,
  # it could be "close" to close a keepalive connection
  proxy_set_header Connection "";

  # SSL configuration
  ssl_protocols TLSv1.3 TLSv1.2;
  # strongest + strong classes + weakest + denied
  ssl_ciphers "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_128_CCM_8_SHA256:TLS_AES_128_CCM_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-PSK-CHACHA20-POLY1305:ECDHE-PSK-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-CCM:DHE-DSS-AES256-GCM-SHA384:DHE-PSK-AES256-GCM-SHA384:DHE-PSK-AES256-CCM:ECDHE-ECDSA-AES256-CCM8:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-CCM8:DHE-DSS-AES128-GCM-SHA256:DHE-PSK-AES128-GCM-SHA256:DHE-PSK-AES128-CCM:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

  ssl_prefer_server_ciphers on;
  # Cache already defined in /etc/nginx/http.d/adminer.conf
  # ssl_session_cache shared:SSL:10m;
  ssl_ecdh_curve secp384r1;
  ssl_session_timeout 5m;
  ssl_session_tickets off;
  ssl_dhparam /etc/letsencrypt/dhparam.pem;

  ssl_certificate /etc/letsencrypt/real/fullchain1.pem;
  ssl_certificate_key /etc/letsencrypt/real/privkey1.pem;

  location / {
    proxy_pass "http://localhost:8080";
    proxy_set_header   Host $host:$server_port;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;

    # Protection against Clickjacking (an attack that occurs when an attacker uses a transparent iframe in a window to trick a user into clicking on a CTA, such as a button or link, to another server in which they have an identical looking window. The attacker in a sense hijacks the clicks meant for the original server and sends them to the other server. X-Frame-Options "DENY" prevent the web page to be loaded on a frame
    add_header X-Frame-Options "DENY" always;

    # enable the cross-site scripting (XSS) filter 
    # built into modern web browsers
    add_header X-XSS-Protection "1; mode=block" always;

    # prevents Internet Explorer and Google Chrome from sniffing a # response away from the declared content-type.
    # This helps reduce the danger of drive-by downloads and helps 
    # treat the content the right way
    add_header X-Content-Type-Options "nosniff" always;

    # config to enable HSTS(HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;" always;

    # Content Security Policy (CSP) is an HTTP header that allows
    # site operators fine-grained control over where resources on 
    # their site can be loaded from.
    # The primary benefit of CSP comes from disabling the use 
    # of unsafe inline JavaScript
    add_header Content-Security-Policy "frame-ancestors 'none'; base-uri 'self'; default-src 'none'; script-src 'self'; style-src 'self'; font-src 'self' data:; img-src 'self' data: blob:; connect-src 'self'; media-src 'self'; manifest-src 'self'; form-action 'self'" always;

    # The browser will only set the referrer header on requests 
    # to the same origin. If the destination is another origin
    # then no referrer information will be sent.
    add_header Referrer-Policy same-origin always;

    # This header will allow a site to enable or disable certain browser features.
    add_header Permissions-Policy "geolocation=(self), accelerometer=(self), autoplay=(self), camera=(self), encrypted-media=(self), fullscreen=(self), gyroscope=(self), magnetometer=(self), microphone=(self), midi=(self), payment=(self), picture-in-picture=(self), publickey-credentials-get=(self), sync-xhr=(self), usb=(self), screen-wake-lock=(self), xr-spatial-tracking=(self)" always;
    # ### CORS

    # 1. Allow any origin

    add_header 'Access-Control-Allow-Origin' '*' always;

    # If the server sends a response with an Access-Control-Allow-Origin value that is an explicit origin (rather than the "*" wildcard), then the response should also include a Vary response header with the value Origin â€” to indicate to browsers that server responses can differ based on the value of the Origin request header.

    add_header 'Vary' 'Origin' always;

    # 2. Credentials can be cookies, authorization headers or TLS client certificates

    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # 3. What methods should be allowed when accessing the resource in response to a preflight request

    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, HEAD' always;

    # 4. Access-Control-Allow-Headers response header is used in response to a preflight request to indicate which HTTP headers can be used during the actual request.

    add_header 'Access-Control-Allow-Headers' "Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization" always;

    # 5. Tell client that this pre-flight info is valid for 10 minutes

    add_header 'Access-Control-Max-Age' 600 always;

    # 1 month
    add_header Cache-Control "max-age=2592000" always;
  }

}