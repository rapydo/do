from typing import Any
from restapi import decorators
from restapi.connectors import {{auth_service}}
from restapi.models import Schema, fields  # ,  validate
from restapi.rest.definition import EndpointResource, Response
from restapi.services.authentication import User
from restapi.utilities.logs import log
# from restapi.services.authentication import Role

class MyInputSchema(Schema):
    myfield1 = fields.Str()


class MyOutputSchema(Schema):
    myfield2 = fields.Str()


class {{name.title().replace(" ", "")}}(EndpointResource):

    labels = ["custom"]

    @decorators.auth.require()
    @decorators.marshal_with(MyOutputSchema, code=200)
    @decorators.endpoint(
        path="/{{name.replace(" ", "_").lower()}}",
        summary="...",
        responses={
            "200": "..."
        }
    )
    # @decorators.cache(timeout=300)
    def get(self, user: User) -> Response:

        db = {{auth_service}}.get_instance()
        # self.log_event(self.events.access, your-obj)

        data = {}
        return self.response(data)

    @decorators.auth.require()
    @decorators.use_kwargs(MyInputSchema)
    @decorators.endpoint(
        path="/{{name.replace(" ", "_").lower()}}",
        summary="...",
        responses={
            "200": "..."
        }
    )
    def post(self, user: User, **kwargs: Any) -> Response:

        db = {{auth_service}}.get_instance()
        log.info("Created")

        # Assign with the uuid of newly created resource
        data = {}

        # self.log_event(self.events.create, your-obj, kwargs)

        return self.response(data)

    @decorators.auth.require()
    @decorators.use_kwargs(MyInputSchema)
    @decorators.endpoint(
        path="/{{name.replace(" ", "_").lower()}}/<uuid>",
        summary="...",
        responses={
            "204": "..."
        }
    )
    def put(self, uuid: str, user: User, **kwargs: Any) -> Response:

        db = {{auth_service}}.get_instance()
        # db.update_properties(myobj, kwargs)
        log.info("Updated")
        # self.log_event(self.events.modify, your-obj, kwargs)

        return self.empty_response()

    @decorators.auth.require()
    @decorators.use_kwargs(MyInputSchema)
    @decorators.endpoint(
        path="/{{name.replace(" ", "_").lower()}}/<uuid>",
        summary="...",
        responses={
            "204": "..."
        }
    )
    def patch(self, uuid: str, user: User, **kwargs: Any) -> Response:
        """ Update profile for current user """

        db = {{auth_service}}.get_instance()

        # db.update_properties(user, kwargs)

        # self.log_event(self.events.modify, your-obj, kwargs)

        log.info("Updated")

        return self.empty_response()

    @decorators.auth.require()
    @decorators.endpoint(
        path="/{{name.replace(" ", "_").lower()}}/<uuid>",
        summary="...",
        responses={
            "204": "..."
        }
    )
    def delete(self, uuid: str, user: User, **kwargs: Any) -> Response:

        db = {{auth_service}}.get_instance()
        log.info("Deleted")
        # self.log_event(self.events.delete, your-obj)

        return self.empty_response()
