name: Backend

on:
  # push:
  # pull_request:
  # schedule:
  #   - cron: "0 5 * * *"
  workflow_dispatch:
env:
  PROJECT: {{ project }}

# Cancel previous running jobs on the same branch in case of new pushs
concurrency:
  group: backend-{% raw %}${{ github.ref }}{% endraw %}
  cancel-in-progress: true

jobs:
  Development-mode:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: rapydo/actions/install@v2
        with:
          project: ${PROJECT}
          # swarm: 1

      - name: Run Pytest
        run: |

          rapydo pull --quiet
          # If a custom build is added
          # rapydo build

          # To add a test task
          # rapydo add task test_task

          rapydo start
          rapydo shell backend 'restapi wait'

          rapydo shell backend 'restapi tests --wait --destroy'

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -E "Exit|Restarting|Created") ]]

      - name: Coverage
        uses: rapydo/actions/coverage@v2
        with:
          repository: projects/${PROJECT}
          project: ${PROJECT}
          step: backend
          codecov_token: {% raw -%}${{ secrets.CODECOV_TOKEN }}{% endraw %}

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Docker Logs
        if: failure()
        run: rapydo logs

  Production-mode:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: rapydo/actions/install@v2
        with:
          project: ${PROJECT}
          # swarm: 1

      - name: Production mode
        run: |
          rapydo --testing --prod init --force
          # rapydo run registry
          rapydo pull --quiet

          # If a custom build is added
          # rapydo build

          rapydo ssl --volatile
          rapydo start
          sleep 45
          rapydo logs
          curl --insecure -X GET --max-time 5 https://localhost/api/status | grep "Server is alive"
          rapydo logs --tail 20 proxy backend

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          # Except for frontend that is expected to be exited in prod mode
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -v frontend | grep -E "Exit|Restarting|Created") ]]

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Docker Logs
        if: failure()
        run: rapydo logs
