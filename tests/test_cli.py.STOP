import os
import shutil
import signal
import time
from datetime import datetime

from tests import create_project, exec_command
from tests import mock_KeyboardInterrupt, signal_handler


def test_all(capfd):

    create_project(
        capfd=capfd,
        name="first",
        auth="postgres",
        frontend="angular",
        services=["rabbit", "neo4j"],
        init=True,
        pull=True,
        start=False,
    )

    # docker dump
    exec_command(
        capfd,
        "dump",
        "Config dump: docker-compose.yml",
    )

    exec_command(
        capfd, "verify --no-tty sqlalchemy", "No container found for backend_1"
    )

    exec_command(
        capfd,
        "-s invalid start",
        "No such service: invalid",
    )

    exec_command(capfd, "diagnostic http://localhost", "http schema not supported")
    exec_command(
        capfd,
        "diagnostic https://nolocalhost",
        "Host https://nolocalhost is unreachable",
    )
    exec_command(
        capfd, "diagnostic nolocalhost", "Host https://nolocalhost is unreachable"
    )

    # Let's start with the stack
    exec_command(
        capfd,
        "-e CRONTAB_ENABLE=1 start",
        "docker-compose command: 'up'",
        "Stack started",
    )

    exec_command(
        capfd,
        "-s backend -e CRONTAB_ENABLE=1 start --force",
        "docker-compose command: 'up'",
        "Stack started",
    )

    exec_command(
        capfd,
        "status",
        "docker-compose command: 'ps'",
        # "first_backend_1",
    )

    # Added for GitHub Actions
    exec_command(
        capfd,
        "shell backend hostname",
        "the input device is not a TTY",
    )

    # --no-tty is needed on GitHub Actions
    exec_command(
        capfd,
        "shell --no-tty backend --command hostname",
        "Deprecated use of --command",
    )
    exec_command(
        capfd,
        "shell --no-tty backend --command 'hostname --short'",
        "Deprecated use of --command",
    )

    exec_command(
        capfd,
        "shell --no-tty backend hostname",
        "backend-server",
    )

    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(2)
    exec_command(
        capfd,
        "shell --no-tty backend --default-command",
        # "*** RESTful HTTP API ***",
        # "Serving Flask app",
        "Time is up",
    )

    # This can't work on GitHub Actions due to the lack of tty
    # signal.signal(signal.SIGALRM, handler)
    # signal.alarm(2)
    # exec_command(
    #     capfd,
    #     "shell --no-tty backend",
    #     # "developer@backend-server:[/code]",
    #     "Time is up",
    # )

    # Testing default users
    exec_command(
        capfd,
        "shell --no-tty backend whoami",
        "developer",
    )
    exec_command(
        capfd,
        "shell --no-tty frontend whoami",
        "node",
    )
    # No default user for rabbit container
    exec_command(
        capfd,
        "shell --no-tty rabbit whoami",
        "root",
    )
    exec_command(
        capfd,
        "shell --no-tty postgres whoami",
        "postgres",
    )
    exec_command(
        capfd,
        "shell --no-tty neo4j whoami",
        "neo4j",
    )

    exec_command(
        capfd,
        "scale rabbit",
        "Please specify how to scale: SERVICE=NUM_REPLICA",
        "You can also set a DEFAULT_SCALE_RABBIT variable in your .projectrc file",
    )
    exec_command(
        capfd,
        "-e DEFAULT_SCALE_RABBIT=2 scale rabbit",
        # "Starting first_rabbit_1",
        # "Creating first_rabbit_2",
    )
    exec_command(
        capfd,
        "scale rabbit=x",
        "Invalid number of replicas: x",
    )

    exec_command(
        capfd,
        "scale rabbit=2",
        # "Starting first_rabbit_1",
        # "Starting first_rabbit_2",
    )

    with open(".projectrc", "a") as f:
        f.write("\n      DEFAULT_SCALE_RABBIT: 3\n")

    exec_command(
        capfd,
        "scale rabbit",
        # "Starting first_rabbit_1",
        # "Starting first_rabbit_2",
        # "Creating first_rabbit_3",
    )

    exec_command(
        capfd,
        "scale rabbit=1",
        # "Starting first_rabbit_1",
        # "Stopping and removing first_rabbit_2",
        # "Stopping and removing first_rabbit_3",
    )

    # Backend logs are never timestamped

    exec_command(
        capfd,
        "logs -s backend --tail 10 --no-color",
        "docker-compose command: 'logs'",
        "backend_1       | Development mode",
        "Found no cronjob to be enabled, skipping crontab setup",
    )

    with open("projects/first/backend/cron/hello-world.cron", "w+") as f:
        f.write("* * * * * echo 'Hello world' >> /var/log/cron.log 2>&1\n")
        f.write("\n")

    # After the restart the cron enabled will be tested again
    # Test is below to wait the container restart
    exec_command(
        capfd,
        "-s backend restart",
        "Stack restarted",
    )

    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%dT")

    # Frontend logs are timestamped
    exec_command(
        capfd,
        "-s frontend logs --tail 10 --no-color",
        "docker-compose command: 'logs'",
        f"frontend_1      | {timestamp}",
    )

    # With multiple services logs are not timestamped
    exec_command(
        capfd,
        "-s frontend,backend logs --tail 10 --no-color",
        "docker-compose command: 'logs'",
        "backend_1       | Development mode",
        "frontend_1      | Merging files...",
    )

    signal.signal(signal.SIGALRM, mock_KeyboardInterrupt)
    signal.alarm(3)
    # Here using main services option
    exec_command(
        capfd,
        "-s backend logs --tail 10 --follow",
        "docker-compose command: 'logs'",
        "Stopped by keyboard",
    )

    # Test again the cron enabling
    exec_command(
        capfd,
        "logs -s backend --tail 10 --no-color",
        "docker-compose command: 'logs'",
        "backend_1       | Development mode",
        "backend_1       | Enabling cron...",
        "backend_1       | Cron enabled",
        # this is the output of crontab -l that verifies the cronjob installation
        "* * * * * echo 'Hello world'",
    )

    # We modified projectrc to contain: DEFAULT_SCALE_RABBIT: 3
    with open(".env") as env:
        content = [line.rstrip("\n") for line in env]
    assert "DEFAULT_SCALE_RABBIT=3" in content

    # Now we set an env varable to change this value:
    os.environ["DEFAULT_SCALE_RABBIT"] = "2"
    exec_command(capfd, "check -i main")
    with open(".env") as env:
        content = [line.rstrip("\n") for line in env]
    assert "DEFAULT_SCALE_RABBIT=3" not in content
    assert "DEFAULT_SCALE_RABBIT=2" in content

    exec_command(capfd, "verify --no-tty invalid", "Service invalid not detected")
    exec_command(capfd, "verify --no-tty redis", "Service redis not detected")
    exec_command(capfd, "verify --no-tty sqlalchemy", "Service sqlalchemy is reachable")

    exec_command(
        capfd,
        "-s backend remove --net",
        "Incompatibile options --networks and --service",
    )

    exec_command(
        capfd,
        "-s backend remove --all",
        "Incompatibile options --all and --service",
    )

    exec_command(
        capfd,
        "remove",
        "docker-compose command: 'stop'",
        "Stack removed",
    )

    exec_command(
        capfd,
        "remove --networks",
        "Stack removed",
    )

    exec_command(
        capfd,
        "remove --all",
        "Stack removed",
    )

    exec_command(
        capfd,
        "shell --no-tty backend hostname",
        "No container found for backend_1",
    )

    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(4)
    exec_command(
        capfd,
        "-s backend start --no-detach",
        # "REST API backend server is ready to be launched",
        "Time is up",
    )

    # This is because after start --no-detach the container in still in exited status
    exec_command(
        capfd,
        "volatile backend hostname",
        "Bind for 0.0.0.0:8080 failed: port is already allocated",
    )

    exec_command(
        capfd,
        "remove --all",
        "Stack removed",
    )

    exec_command(
        capfd,
        "volatile backend --command hostname",
        "Deprecated use of --command",
    )
    exec_command(
        capfd,
        "volatile backend --command 'hostname --short'",
        "Deprecated use of --command",
    )

    exec_command(
        capfd,
        "volatile backend hostname",
        "backend-server",
    )

    exec_command(
        capfd,
        "volatile backend whoami",
        "root",
    )
    exec_command(
        capfd,
        "volatile backend -u developer whoami",
        "Please remember that users in volatile containers are not mapped on current ",
        "developer",
    )
    exec_command(
        capfd,
        "volatile backend -u invalid whoami",
        "Error response from daemon:",
        "unable to find user invalid:",
        "no matching entries in passwd file",
    )

    signal.signal(signal.SIGALRM, signal_handler)
    signal.alarm(4)
    exec_command(
        capfd,
        "volatile maintenance",
        # "Maintenance server is up and waiting for connections",
        "Time is up",
    )

    exec_command(
        capfd,
        "--prod check -i main --no-git --no-builds",
        "The following variables are missing in your configuration",
    )

    exec_command(
        capfd,
        "--prod init -f",
        "Created default .projectrc file",
        "Project initialized",
    )

    exec_command(
        capfd,
        "--prod interfaces swagger --port 124 --detach",
        "You can access swaggerui web page here:",
        "https://localhost:124?docExpansion=list&",
        "url=https://localhost/api/specs",
    )

    exec_command(capfd, "remove --all", "Stack removed")
